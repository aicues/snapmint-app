import React, { FormEvent, useEffect, useRef, useState } from "react";
import { useRouter } from "next/router";
import type { NextPage, NextPageContext , GetStaticProps, InferGetStaticPropsType, GetServerSideProps, GetStaticPaths } from "next";
import { SSRConfig, useTranslation } from "next-i18next";
import { serverSideTranslations } from "next-i18next/serverSideTranslations";
import { useAddress } from "@thirdweb-dev/react";
import { alchemy } from "@config/alchemy";
import useSWR from 'swr'
import {
  OwnedNft,
  OwnedNftsResponse,
  getNftsForOwner,
} from "@alch/alchemy-sdk";

import NftCard from "@components/NftCard";
import NftInfo from "@components/NftInfo";

import { useContract, useNFT, useNFTs, ThirdwebNftMedia, ThirdwebNftMediaProps } from "@thirdweb-dev/react";

import { ParsedUrlQuery } from 'querystring'

type Props = {
    // Add custom props here
    // data: string; 
    // address: string;
    // trans: SSRConfig;
}
const MyAssets: NextPage = (_props: InferGetStaticPropsType<typeof getStaticProps>) => {

    // Next JS Router hook to redirect to other pages and to grab the query from the URL (listingId)
    const router = useRouter();
    // De-construct listingId out of the router.query.
    // This means that if the user visits /listing/0 then the listingId will be 0.
    // If the user visits /listing/1 then the listingId will be 1.
    const { address } = router.query as { address: string };
    const userAddress = useAddress();
    const viewingOwnCollection = userAddress === address;

    const fetcher = (add: { toString: () => any; }) => getNftsForOwner(alchemy, add?.toString() ?? "").then(res => res.ownedNfts)

    const { data, error } = useSWR(userAddress, fetcher)

    // NFTs

    const nfts = data?.map((ownedNft: OwnedNft) => {
      const contractAddress = ownedNft.contract.address;
      const description = ownedNft.description;
      const image = ownedNft.media[0]?.gateway;

      console.log("ownedNft", ownedNft);
      return (
        <NftCard 
          image={image} 
          id={ownedNft.tokenId}
          description={description}
          title={ownedNft.title}
          contractAddress={contractAddress}
          ownerAddress={userAddress as string} //?
          key={contractAddress + ownedNft.tokenId}>
          <></>
        </NftCard>
      );
    });  
 

    return (
        <div className="bg-base-200 flex flex-col md:flex-row sm:flex-row place-items-start p-8 lg:p-16 md:p-12 sm:p-8">
            <div id="container" className="p-6 px-10">
                <h1 className="text-center text-2xl font-normal text-slate-500 hover:font-semibold">
                    Collection at {userAddress}
                </h1>
                <div id="container" className="flex w-full flex-wrap justify-center">
                    {nfts}
                </div>
            </div>
        </div>
    );
};

export const getStaticProps: GetStaticProps<Props> = async ({ locale }) => {
    const trans = await serverSideTranslations(locale ?? "en", ["common"]);
    return {
        props: {
            ...trans,
        },
    }
}

export default MyAssets;